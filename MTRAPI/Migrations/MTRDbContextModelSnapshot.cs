// <auto-generated />
using MTR.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MTR.Migrations
{
    [DbContext(typeof(MTRDbContext))]
    partial class MTRDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MTR.Models.Address", b =>
                {
                    b.Property<string>("AddressID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LRNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("POBox")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetRoad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPayerID")
                        .HasColumnType("nvarchar(36)");

                    b.HasKey("AddressID");

                    b.HasIndex("TaxPayerID")
                        .IsUnique()
                        .HasFilter("[TaxPayerID] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("MTR.Models.ETR", b =>
                {
                    b.Property<string>("ETRID")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("ConfirmationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CurrentDaySalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentDayVATAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMonthToDateSalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMonthToDateVATAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentYearToDateSalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentYearToDateVATAmount")
                        .HasColumnType("float");

                    b.Property<string>("RegistrationDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxPayerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ETRID");

                    b.HasIndex("TaxPayerID");

                    b.ToTable("ETRs");
                });

            modelBuilder.Entity("MTR.Models.ETRReceipt", b =>
                {
                    b.Property<string>("ETRReceiptID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ETRID")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.Property<string>("SaleDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SaleID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("VATAmount")
                        .HasColumnType("float");

                    b.HasKey("ETRReceiptID");

                    b.HasIndex("ETRID");

                    b.HasIndex("SaleID")
                        .IsUnique();

                    b.ToTable("ETRReceipts");
                });

            modelBuilder.Entity("MTR.Models.Sale", b =>
                {
                    b.Property<string>("SaleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ETRID")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("SaleAmount")
                        .HasColumnType("float");

                    b.Property<string>("SaleDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("VATAmount")
                        .HasColumnType("float");

                    b.HasKey("SaleID");

                    b.HasIndex("ETRID");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("MTR.Models.TaxPayer", b =>
                {
                    b.Property<string>("TaxPayerID")
                        .HasColumnType("nvarchar(36)")
                        .HasMaxLength(36);

                    b.Property<double>("CurrentDaySalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentDayVATAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMonthToDateSalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentMonthToDateVATAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentYearToDateSalesAmount")
                        .HasColumnType("float");

                    b.Property<double>("CurrentYearToDateVATAmount")
                        .HasColumnType("float");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("KRAPin")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("RegistrationDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("TaxPayerID");

                    b.ToTable("TaxPayers");
                });

            modelBuilder.Entity("MTR.Models.Address", b =>
                {
                    b.HasOne("MTR.Models.TaxPayer", "TaxPayer")
                        .WithOne("Address")
                        .HasForeignKey("MTR.Models.Address", "TaxPayerID");
                });

            modelBuilder.Entity("MTR.Models.ETR", b =>
                {
                    b.HasOne("MTR.Models.TaxPayer", "TaxPayer")
                        .WithMany("ETRs")
                        .HasForeignKey("TaxPayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTR.Models.ETRReceipt", b =>
                {
                    b.HasOne("MTR.Models.ETR", "ETR")
                        .WithMany()
                        .HasForeignKey("ETRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MTR.Models.Sale", "Sale")
                        .WithOne("ETRReceipt")
                        .HasForeignKey("MTR.Models.ETRReceipt", "SaleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MTR.Models.Sale", b =>
                {
                    b.HasOne("MTR.Models.ETR", "ETR")
                        .WithMany("Sales")
                        .HasForeignKey("ETRID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
